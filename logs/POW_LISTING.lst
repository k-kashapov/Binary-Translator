     1                                  global _start
     2                                  section .data
     3                                  
     4 00000000 00020000                const_for_pow: dd 0x200        ; memory for float computations
     5                                  section .text
     6                                  
     7                                  _start:
     8 00000000 53                      	push rbx   ; push everything
     9 00000001 55                      	push rbp   ; push everything
    10 00000002 4154                    	push r12   ; push everything
    11 00000004 4155                    	push r13   ; push everything
    12 00000006 4156                    	push r14   ; push everything
    13 00000008 4157                    	push r15   ; push everything
    14                                  
    15 0000000A E814000000              	call f1058 ; call main
    16                                  
    17 0000000F 5B                      	pop rbx   ; restore initial regs state
    18 00000010 5D                      	pop rbp   ; restore initial regs state
    19 00000011 415C                    	pop r12   ; restore initial regs state
    20 00000013 415D                    	pop r13   ; restore initial regs state
    21 00000015 415E                    	pop r14   ; restore initial regs state
    22 00000017 415F                    	pop r15   ; restore initial regs state
    23                                  
    24 00000019 4889C7                  	mov rdi, rax
    25 0000001C B83C000000              	mov rax, 0x3C
    26 00000021 0F05                    	syscall
    27                                  
    28                                  f1058: ; def main
    29 00000023 55                      	push rbp ; create stack frame
    30 00000024 4889E5                  	mov rbp, rsp
    31                                  
    32 00000027 4883EC00                	sub rsp, 0 ; jump over parameters
    33                                  
    34 0000002B B800000000              	mov rax, 0 ; const value << 9
    35 00000030 4883EC08                	sub rsp, 8 ; declared ЛошедьА; [8; 16]
    36 00000034 488945F8                	mov [rbp - 8], rax ; ЛошедьА = rax
    37                                  	
    38 00000038 B800000000              	mov rax, 0 ; const value << 9
    39 0000003D 4883EC08                	sub rsp, 8 ; declared ЛошедьБ; [16; 24]
    40 00000041 488945F0                	mov [rbp - 16], rax ; ЛошедьБ = rax
    41                                  	
    42 00000045 B800000000              	mov rax, 0 ; const value << 9
    43 0000004A 4883EC08                	sub rsp, 8 ; declared ЛошедьВ; [24; 32]
    44 0000004E 488945E8                	mov [rbp - 24], rax ; ЛошедьВ = rax
    45                                  	
    46 00000052 4831FF                  	xor rdi, rdi
    47 00000055 4883EC08                	sub rsp, 8
    48 00000059 4889E6                  	mov rsi, rsp ; buffer for inputted value
    49                                  
    50 0000005C BA07000000              	mov rdx, 7
    51 00000061 4831C0                  	xor rax, rax
    52 00000064 0F05                    	syscall
    53 00000066 4889E6                  	mov rsi, rsp
    54 00000069 4889C1                  	mov rcx, rax
    55 0000006C E87B010000              	call atoi
    56 00000071 4883C408                	add rsp, 8
    57 00000075 48C1E009                	sal rax, 9 ; pseudo-float emul
    58 00000079 488945F8                	mov [rbp - 8], rax ; ЛошедьА = rax
    59                                  	
    60 0000007D 4831FF                  	xor rdi, rdi
    61 00000080 4883EC08                	sub rsp, 8
    62 00000084 4889E6                  	mov rsi, rsp ; buffer for inputted value
    63                                  
    64 00000087 BA07000000              	mov rdx, 7
    65 0000008C 4831C0                  	xor rax, rax
    66 0000008F 0F05                    	syscall
    67 00000091 4889E6                  	mov rsi, rsp
    68 00000094 4889C1                  	mov rcx, rax
    69 00000097 E850010000              	call atoi
    70 0000009C 4883C408                	add rsp, 8
    71 000000A0 48C1E009                	sal rax, 9 ; pseudo-float emul
    72 000000A4 488945F0                	mov [rbp - 16], rax ; ЛошедьБ = rax
    73                                  	
    74 000000A8 488B45F8                		mov rax, [rbp - 8] ; ЛошедьА
    75 000000AC 50                      		push rax
    76                                  
    77 000000AD 488B45F0                		mov rax, [rbp - 16] ; ЛошедьБ
    78 000000B1 50                      		push rax
    79                                  
    80 000000B2 4883EC10                		sub rsp, 16
    81 000000B6 488B442408              		mov rax, [rsp + 8]
    82 000000BB 4885C0                  		test rax, rax
    83 000000BE 7445                    		jz .DontPow
    84 000000C0 4883F801                		cmp rax, 1
    85 000000C4 743F                    		je .DontPow
    86 000000C6 66833C2401              		cmp WORD [rsp], 1
    87 000000CB 7437                    		je .DontPowButPop
    88 000000CD DF0424                  		fild  WORD [rsp]      ; load base onto FPU stack
    89 000000D0 6800020000              		push 512
    90 000000D5 DE3424                  		fidiv WORD [rsp]      ; convert from pseudo-float
    91                                  
    92 000000D8 DF442410                		fild  WORD [rsp + 16] ; load power onto FPU stack
    93 000000DC DE3424                  		fidiv WORD [rsp]      ; convert from pseudo-float
    94                                  
    95 000000DF D9F1                    		fyl2x                 ; power * log_2_(base)
    96                                  
    97                                  		; value between -1 and 1 is required by pow of 2 command
    98 000000E1 DB5424F8                		fist DWORD [rsp - 8]  ; cast to int
    99 000000E5 DB4424F8                		fild DWORD [rsp - 8]  ;
   100 000000E9 DEE9                    		fsub                  ; fit into [-1; 1]
   101                                  
   102 000000EB D9F0                    		f2xm1                 ; 2^(power * log_2_(base)) - 1 = base^power
   103                                  
   104 000000ED D9E8                    		fld1                  ; push 1
   105 000000EF DEC1                    		fadd                  ; add 1 to the result
   106                                  
   107 000000F1 DB4424F8                		fild DWORD [rsp - 8]  ; load casted value
   108 000000F5 D9C9                    		fxch                  ; exchange st(0) <-> st(1)
   109 000000F7 D9FD                    		fscale                ; multiply by remaining power of 2
   110 000000F9 DA0C24                  		fimul DWORD [rsp]      ; to pseudo-float
   111 000000FC DB5C2410                		fistp DWORD [rsp + 16] ; save pow value to stack
   112                                  
   113 00000100 4883C410                		add rsp, 16           ; remove 512 and args from stack
   114                                  		.DontPowButPop:
   115 00000104 58                      		pop rax
   116                                  		.DontPow:
   117 00000105 488945E8                	mov [rbp - 24], rax ; ЛошедьВ = rax
   118                                  	
   119 00000109 488B45E8                	mov rax, [rbp - 24] ; ЛошедьВ
   120 0000010D E80A000000              	call out
   121                                  	
   122 00000112 B800000000              	mov rax, 0 ; const value << 9
   123 00000117 4889EC                  	mov rsp, rbp
   124 0000011A 5D                      	pop rbp ; stack frame return
   125                                  
   126 0000011B C3                      	ret
   127                                  	
   128                                  
   129                                  section .text
   130                                  
   131                                  ;==============================================
   132                                  ; StdLib: out
   133                                  ; Expects:
   134                                  ;   rax - value
   135                                  ; Returns: None
   136                                  ; Corrupt:
   137                                  ;   rdi = rsp - Will create buffer on stack
   138                                  ;==============================================
   139                                  
   140                                  out:
   141 0000011C 55                          push rbp
   142 0000011D 4889E5                      mov rbp, rsp
   143 00000120 4883EC20                    sub rsp, 32
   144 00000124 4889E7                      mov rdi, rsp
   145 00000127 C6070A                      mov BYTE [rdi], 0x0A ; \n
   146 0000012A 48FFC7                      inc rdi
   147 0000012D 66C7073E3E                  mov WORD [rdi], ">>"; \n
   148 00000132 4883C702                    add rdi, 2
   149 00000136 C60720                      mov BYTE [rdi], 0x20 ; \n
   150 00000139 48FFC7                      inc rdi
   151 0000013C 4883F800                    cmp rax, 0
   152 00000140 7D09                        jge .NotNegative
   153 00000142 C6072D                      mov BYTE [rdi], '-'
   154 00000145 48FFC7                      inc rdi
   155 00000148 48F7D8                      neg rax
   156                                  .NotNegative:
   157 0000014B 50                          push rax
   158 0000014C 48C1E809                    shr rax, 9
   159 00000150 4889C2                      mov rdx, rax
   160 00000153 41BA0A000000                mov r10, 10
   161 00000159 E84F000000                  call CntBytes
   162 0000015E E86B000000                  call itoa10
   163 00000163 58                          pop rax
   164 00000164 4C01C7                      add rdi, r8 ; step over the word
   165 00000167 C6072E                      mov BYTE [rdi], 0x2E ; \n
   166 0000016A 48FFC7                      inc rdi
   167 0000016D 4825FF010000                and rax, 511
   168 00000173 BBE8030000                  mov rbx, 1000
   169 00000178 48F7E3                      mul rbx
   170 0000017B 48C1E809                    shr rax, 9
   171 0000017F 4889C2                      mov rdx, rax
   172 00000182 66C7073030                  mov WORD [rdi], 0x30303030
   172          ******************       warning: word data exceeds bounds [-w+number-overflow]
   173 00000187 4883C702                    add rdi, 2
   174 0000018B E83E000000                  call itoa10
   175 00000190 B801000000                  mov rax, 0x01 ; write
   176 00000195 4889FA                      mov rdx, rdi ; buffer len
   177 00000198 4829E2                      sub rdx, rsp ; buffer len
   178 0000019B 48FFC2                      inc rdx      ; buffer len
   179 0000019E BF01000000                  mov rdi, 0x01 ; stdout
   180 000001A3 4889E6                      mov rsi, rsp ; buffer start
   181 000001A6 0F05                        syscall
   182 000001A8 4889EC                      mov rsp, rbp
   183 000001AB 5D                          pop rbp
   184 000001AC C3                          ret
   185                                  ;==============================================
   186                                  ; StdLib: itoa
   187                                  ;==============================================
   188                                  
   189                                  ;==============================================
   190                                  ; Count bytes
   191                                  ; Counts the amount of bytes needed to write down an int
   192                                  ; Expects:
   193                                  ;      rax - value
   194                                  ;      r10 = 10
   195                                  ;      rdi - buffer
   196                                  ;==============================================
   197                                  
   198                                  CntBytes:              ; skips, bytes that are required to save the value
   199 000001AD 4D31C0                  xor r8, r8         ; reset bytecount
   200 000001B0 50                      push rax
   201 000001B1 4831D2                  .loop:xor rdx, rdx		; reset remaining
   202 000001B4 49F7F2                  div r10            ; rax = rax / 10; rdx = rax % 10
   203 000001B7 48FFC7                  inc rdi
   204 000001BA 49FFC0                  inc r8
   205 000001BD 4883F800                cmp rax, 0
   206 000001C1 77EE                    ja .loop
   207 000001C3 4C89C8                  mov rax, r9           	; reset value
   208 000001C6 C60700                  mov byte [rdi], 00
   209 000001C9 48FFCF                  dec rdi
   210 000001CC 58                      pop rax
   211 000001CD C3                      ret
   212                                  ;==============================================
   213                                  ; Converts integer value into a string, base 10
   214                                  ; Expects:
   215                                  ;       r10 = 10
   216                                  ;       rdx - Integer value
   217                                  ;       rdi - Buffer to write into
   218                                  ; Returns:
   219                                  ;       r8  - Printed bytes num
   220                                  ; Destr:
   221                                  ;       rdx, r10, r9
   222                                  ;==============================================
   223                                  itoa10:
   224 000001CE 4D31C0                  xor r8, r8		    ; r8 = bytes counter
   225                                  .Print:
   226 000001D1 4831D2                  xor rdx, rdx
   227 000001D4 49F7F2                  div r10                ; rax = rax / 10; rdx = rax % 10
   228 000001D7 80C230                  add dl, '0'           	; to ASCII
   229 000001DA 8817                    mov [rdi], dl
   230 000001DC 48FFCF                  dec rdi
   231 000001DF 49FFC0                  inc r8
   232 000001E2 4883F800                cmp rax, 00h
   233 000001E6 77E9                    ja .Print
   234                                  ; rdi = &buffer - 1
   235 000001E8 48FFC7                  inc rdi ; rdi = &buffer
   236 000001EB C3                      ret
   237                                  
   238                                  
   239                                  section .bss
   240                                  
   241 00000000 <res 00000010>          inputbuf: resq 2
   242                                  
   243                                  section .text
   244                                  
   245                                  ;==============================================
   246                                  ; StdLib: atoi
   247                                  ; Expects:
   248                                  ;     rsi = rsp - input buffer
   249                                  ;     rcx - len of input
   250                                  ; Returns:
   251                                  ;     rax - result int
   252                                  ;==============================================
   253                                  atoi:
   254 000001EC 4831C0                      xor rax, rax
   255 000001EF 4831DB                      xor rbx, rbx
   256 000001F2 48FFC9                      dec rcx
   257 000001F5 7421                        jz .End
   258 000001F7 803E2D                      cmp BYTE [rsi], '-'
   259 000001FA 7506                        jne .Loop
   260 000001FC 48FFC6                      inc rsi
   261 000001FF 48FFC9                      dec rcx
   262                                  .Loop:
   263 00000202 8A1E                        mov bl, [rsi]
   264 00000204 4883EB30                    sub rbx, '0'
   265 00000208 48FFC6                      inc rsi
   266 0000020B BA0A000000                  mov rdx, 10
   267 00000210 48F7E2                      mul rdx
   268 00000213 4801D8                      add rax, rbx
   269 00000216 E2EA                        loop .Loop
   270 00000218 807C24082D              .End:    cmp BYTE [rsp + 8], '-'
   271 0000021D 7503                        jne .Ret
   272 0000021F 48F7D8                      neg rax
   273                                  .Ret:
   274 00000222 C3                          ret
   275                                  
   276                                  
