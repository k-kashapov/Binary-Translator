     1                                  global _start
     2                                  section .data
     3                                  
     4 00000000 00020000                const_for_pow: dd 0x200        ; memory for float computations
     5                                  section .text
     6                                  
     7                                  _start:
     8 00000000 53                      	push rbx   ; push everything
     9 00000001 55                      	push rbp   ; push everything
    10 00000002 4154                    	push r12   ; push everything
    11 00000004 4155                    	push r13   ; push everything
    12 00000006 4156                    	push r14   ; push everything
    13 00000008 4157                    	push r15   ; push everything
    14                                  
    15 0000000A E814000000              	call f1058 ; call main
    16                                  
    17 0000000F 5B                      	pop rbx   ; restore initial regs state
    18 00000010 5D                      	pop rbp   ; restore initial regs state
    19 00000011 415C                    	pop r12   ; restore initial regs state
    20 00000013 415D                    	pop r13   ; restore initial regs state
    21 00000015 415E                    	pop r14   ; restore initial regs state
    22 00000017 415F                    	pop r15   ; restore initial regs state
    23                                  
    24 00000019 4889C7                  	mov rdi, rax
    25 0000001C B83C000000              	mov rax, 0x3C
    26 00000021 0F05                    	syscall
    27                                  
    28                                  f1058: ; def main
    29 00000023 55                      	push rbp ; create stack frame
    30 00000024 4889E5                  	mov rbp, rsp
    31                                  
    32 00000027 4883EC00                	sub rsp, 0 ; jump over parameters
    33                                  
    34 0000002B B800000000              	mov rax, 0 ; const value << 9
    35 00000030 4883EC08                	sub rsp, 8 ; declared ЛошедьБ; [8; 16]
    36 00000034 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    37                                  	
    38 00000038 B800120000              	mov rax, 4608 ; const value << 9
    39 0000003D 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    40                                  	
    41 00000041 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    42 00000045 E809000000              	call out
    43                                  	
    44 0000004A 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    45 0000004E 4889EC                  	mov rsp, rbp
    46 00000051 5D                      	pop rbp ; stack frame return
    47                                  
    48 00000052 C3                      	ret
    49                                  	
    50                                  
    51                                  section .text
    52                                  
    53                                  ;==============================================
    54                                  ; StdLib: out
    55                                  ; Expects:
    56                                  ;   rax - value
    57                                  ; Returns: None
    58                                  ; Corrupt:
    59                                  ;   rdi = rsp - Will create buffer on stack
    60                                  ;==============================================
    61                                  
    62                                  out:
    63 00000053 55                          push rbp
    64 00000054 4889E5                      mov rbp, rsp
    65 00000057 4883EC20                    sub rsp, 32
    66 0000005B 4889E7                      mov rdi, rsp
    67 0000005E C6070A                      mov BYTE [rdi], 0x0A ; \n
    68 00000061 48FFC7                      inc rdi
    69 00000064 66C7073E3E                  mov WORD [rdi], ">>"; \n
    70 00000069 4883C702                    add rdi, 2
    71 0000006D C60720                      mov BYTE [rdi], 0x20 ; \n
    72 00000070 48FFC7                      inc rdi
    73 00000073 4883F800                    cmp rax, 0
    74 00000077 7D09                        jge .NotNegative
    75 00000079 C6072D                      mov BYTE [rdi], '-'
    76 0000007C 48FFC7                      inc rdi
    77 0000007F 48F7D8                      neg rax
    78                                  .NotNegative:
    79 00000082 50                          push rax
    80 00000083 48C1E809                    shr rax, 9
    81 00000087 4889C2                      mov rdx, rax
    82 0000008A E84A000000                  call itoa10
    83 0000008F 58                          pop rax
    84 00000090 4150                        push r8
    85 00000092 4C01C7                      add rdi, r8 ; step over the word
    86 00000095 C6072E                      mov BYTE [rdi], 0x2E ; \n
    87 00000098 48FFC7                      inc rdi
    88 0000009B 4825FF010000                and rax, 511
    89 000000A1 BBE8030000                  mov rbx, 1000
    90 000000A6 48F7E3                      mul rbx
    91 000000A9 48C1E809                    shr rax, 9
    92 000000AD 4889C2                      mov rdx, rax
    93 000000B0 E824000000                  call itoa10
    94 000000B5 B801000000                  mov rax, 0x01 ; write
    95 000000BA BF01000000                  mov rdi, 0x01 ; stdout
    96 000000BF 4889E6                      mov rsi, rsp ; buffer start
    97 000000C2 4883C608                    add rsi, 8
    98 000000C6 4C89C2                      mov rdx, r8 ; buffer len computation
    99 000000C9 4158                        pop r8 ; first part len
   100 000000CB 4C01C2                      add rdx, r8
   101 000000CE 4883C206                    add rdx, 6 ; constant part of the string
   102 000000D2 0F05                        syscall
   103 000000D4 4889EC                      mov rsp, rbp
   104 000000D7 5D                          pop rbp
   105 000000D8 C3                          ret
   106                                  ;==============================================
   107                                  ; StdLib: itoa
   108                                  ;==============================================
   109                                  
   110                                  ;==============================================
   111                                  ; Converts integer value into a string, base 10
   112                                  ; Expects:
   113                                  ;       rdx - Integer value
   114                                  ;       rdi - Buffer to write into
   115                                  ; Returns:
   116                                  ;       r8  - Printed bytes num
   117                                  ; Destr:
   118                                  ;       rdx, r10, r9
   119                                  ;==============================================
   120                                  itoa10:
   121 000000D9 4D31C0                  xor r8, r8		; r8 = bytes counter
   122 000000DC 4989D1                  mov r9, rdx 		; from now on, value is stored in r9
   123 000000DF 4889D0                  mov rax, rdx		; save value to rax
   124 000000E2 41BA0A000000            mov r10, 10
   125                                  .CntBytes:              	; skips, bytes that are required to save the value
   126 000000E8 4831D2                  xor rdx, rdx		; reset remaining
   127 000000EB 49F7F2                  div r10            ; rax = rax / 10; rdx = rax % 10
   128 000000EE 48FFC7                  inc rdi
   129 000000F1 49FFC0                  inc r8
   130 000000F4 4883F800                cmp rax, 0000h
   131 000000F8 77EE                    ja .CntBytes
   132 000000FA 4C89C8                  mov rax, r9           	; reset value
   133 000000FD C60700                  mov byte [rdi], 00
   134 00000100 48FFCF                  dec rdi
   135                                  .Print:
   136 00000103 4831D2                  xor rdx, rdx
   137 00000106 49F7F2                  div r10                ; rax = rax / 10; rdx = rax % 10
   138 00000109 80C230                  add dl, '0'           	; to ASCII
   139 0000010C 8817                    mov [rdi], dl
   140 0000010E 48FFCF                  dec rdi
   141 00000111 4883F800                cmp rax, 00h
   142 00000115 77EC                    ja .Print
   143                                  ; rdi = &buffer - 1
   144 00000117 48FFC7                  inc rdi ; rdi = &buffer
   145 0000011A C3                      ret
   146                                  
   147                                  
