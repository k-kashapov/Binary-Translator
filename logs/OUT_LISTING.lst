     1                                  global _start
     2                                  section .data
     3                                  
     4 00000000 00020000                const_for_pow: dd 0x200        ; memory for float computations
     5                                  section .text
     6                                  
     7                                  _start:
     8 00000000 53                      	push rbx   ; push everything
     9 00000001 55                      	push rbp   ; push everything
    10 00000002 4154                    	push r12   ; push everything
    11 00000004 4155                    	push r13   ; push everything
    12 00000006 4156                    	push r14   ; push everything
    13 00000008 4157                    	push r15   ; push everything
    14                                  
    15 0000000A E814000000              	call f1058 ; call main
    16                                  
    17 0000000F 5B                      	pop rbx   ; restore initial regs state
    18 00000010 5D                      	pop rbp   ; restore initial regs state
    19 00000011 415C                    	pop r12   ; restore initial regs state
    20 00000013 415D                    	pop r13   ; restore initial regs state
    21 00000015 415E                    	pop r14   ; restore initial regs state
    22 00000017 415F                    	pop r15   ; restore initial regs state
    23                                  
    24 00000019 4889C7                  	mov rdi, rax
    25 0000001C B83C000000              	mov rax, 0x3C
    26 00000021 0F05                    	syscall
    27                                  
    28                                  f1058: ; def main
    29 00000023 55                      	push rbp ; create stack frame
    30 00000024 4889E5                  	mov rbp, rsp
    31                                  
    32 00000027 4883EC00                	sub rsp, 0 ; jump over parameters
    33                                  
    34 0000002B B800000000              	mov rax, 0 ; const value << 9
    35 00000030 4883EC08                	sub rsp, 8 ; declared ЛошедьБ; [8; 16]
    36 00000034 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    37                                  	
    38 00000038 B800000400              		mov rax, 262144 ; const value << 9
    39 0000003D 50                      		push rax
    40                                  
    41 0000003E B800FE0300              		mov rax, 261632 ; const value << 9
    42 00000043 5B                      		pop rbx
    43                                  
    44 00000044 48C1FB09                		sar rbx, 9 ; pseudo-float emul
    45 00000048 4899                    		cqo
    46                                  
    47 0000004A 48F7FB                  		idiv rbx
    48                                  
    49 0000004D 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    50                                  	
    51 00000051 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    52 00000055 E809000000              	call out
    53                                  	
    54 0000005A 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    55 0000005E 4889EC                  	mov rsp, rbp
    56 00000061 5D                      	pop rbp ; stack frame return
    57                                  
    58 00000062 C3                      	ret
    59                                  	
    60                                  
    61                                  section .text
    62                                  
    63                                  ;==============================================
    64                                  ; StdLib: out
    65                                  ; Expects:
    66                                  ;   rax - value
    67                                  ; Returns: None
    68                                  ; Corrupt:
    69                                  ;   rdi = rsp - Will create buffer on stack
    70                                  ;==============================================
    71                                  
    72                                  out:
    73 00000063 55                          push rbp
    74 00000064 4889E5                      mov rbp, rsp
    75 00000067 4883EC20                    sub rsp, 32
    76 0000006B 4889E7                      mov rdi, rsp
    77 0000006E C6070A                      mov BYTE [rdi], 0x0A ; \n
    78 00000071 48FFC7                      inc rdi
    79 00000074 66C7073E3E                  mov WORD [rdi], ">>"; \n
    80 00000079 4883C702                    add rdi, 2
    81 0000007D C60720                      mov BYTE [rdi], 0x20 ; \n
    82 00000080 48FFC7                      inc rdi
    83 00000083 4883F800                    cmp rax, 0
    84 00000087 7D09                        jge .NotNegative
    85 00000089 C6072D                      mov BYTE [rdi], '-'
    86 0000008C 48FFC7                      inc rdi
    87 0000008F 48F7D8                      neg rax
    88                                  .NotNegative:
    89 00000092 50                          push rax
    90 00000093 48C1E809                    shr rax, 9
    91 00000097 4889C2                      mov rdx, rax
    92 0000009A 41BA0A000000                mov r10, 10
    93 000000A0 E84F000000                  call CntBytes
    94 000000A5 E86B000000                  call itoa10
    95 000000AA 58                          pop rax
    96 000000AB 4C01C7                      add rdi, r8 ; step over the word
    97 000000AE C6072E                      mov BYTE [rdi], 0x2E ; \n
    98 000000B1 48FFC7                      inc rdi
    99 000000B4 4825FF010000                and rax, 511
   100 000000BA BBE8030000                  mov rbx, 1000
   101 000000BF 48F7E3                      mul rbx
   102 000000C2 48C1E809                    shr rax, 9
   103 000000C6 4889C2                      mov rdx, rax
   104 000000C9 66C7073030                  mov WORD [rdi], 0x30303030
   104          ******************       warning: word data exceeds bounds [-w+number-overflow]
   105 000000CE 4883C702                    add rdi, 2
   106 000000D2 E83E000000                  call itoa10
   107 000000D7 B801000000                  mov rax, 0x01 ; write
   108 000000DC 4889FA                      mov rdx, rdi ; buffer len
   109 000000DF 4829E2                      sub rdx, rsp ; buffer len
   110 000000E2 48FFC2                      inc rdx      ; buffer len
   111 000000E5 BF01000000                  mov rdi, 0x01 ; stdout
   112 000000EA 4889E6                      mov rsi, rsp ; buffer start
   113 000000ED 0F05                        syscall
   114 000000EF 4889EC                      mov rsp, rbp
   115 000000F2 5D                          pop rbp
   116 000000F3 C3                          ret
   117                                  ;==============================================
   118                                  ; StdLib: itoa
   119                                  ;==============================================
   120                                  
   121                                  ;==============================================
   122                                  ; Count bytes
   123                                  ; Counts the amount of bytes needed to write down an int
   124                                  ; Expects:
   125                                  ;      rax - value
   126                                  ;      r10 = 10
   127                                  ;      rdi - buffer
   128                                  ;==============================================
   129                                  
   130                                  CntBytes:              ; skips, bytes that are required to save the value
   131 000000F4 4D31C0                  xor r8, r8         ; reset bytecount
   132 000000F7 50                      push rax
   133 000000F8 4831D2                  .loop:xor rdx, rdx		; reset remaining
   134 000000FB 49F7F2                  div r10            ; rax = rax / 10; rdx = rax % 10
   135 000000FE 48FFC7                  inc rdi
   136 00000101 49FFC0                  inc r8
   137 00000104 4883F800                cmp rax, 0
   138 00000108 77EE                    ja .loop
   139 0000010A 4C89C8                  mov rax, r9           	; reset value
   140 0000010D C60700                  mov byte [rdi], 00
   141 00000110 48FFCF                  dec rdi
   142 00000113 58                      pop rax
   143 00000114 C3                      ret
   144                                  ;==============================================
   145                                  ; Converts integer value into a string, base 10
   146                                  ; Expects:
   147                                  ;       r10 = 10
   148                                  ;       rdx - Integer value
   149                                  ;       rdi - Buffer to write into
   150                                  ; Returns:
   151                                  ;       r8  - Printed bytes num
   152                                  ; Destr:
   153                                  ;       rdx, r10, r9
   154                                  ;==============================================
   155                                  itoa10:
   156 00000115 4D31C0                  xor r8, r8		    ; r8 = bytes counter
   157                                  .Print:
   158 00000118 4831D2                  xor rdx, rdx
   159 0000011B 49F7F2                  div r10                ; rax = rax / 10; rdx = rax % 10
   160 0000011E 80C230                  add dl, '0'           	; to ASCII
   161 00000121 8817                    mov [rdi], dl
   162 00000123 48FFCF                  dec rdi
   163 00000126 49FFC0                  inc r8
   164 00000129 4883F800                cmp rax, 00h
   165 0000012D 77E9                    ja .Print
   166                                  ; rdi = &buffer - 1
   167 0000012F 48FFC7                  inc rdi ; rdi = &buffer
   168 00000132 C3                      ret
   169                                  
   170                                  
