     1                                  global _start
     2                                  section .data
     3                                  
     4 00000000 00020000                const_for_pow: dd 0x200        ; memory for float computations
     5                                  section .text
     6                                  
     7                                  _start:
     8 00000000 53                      	push rbx   ; push everything
     9 00000001 55                      	push rbp   ; push everything
    10 00000002 4154                    	push r12   ; push everything
    11 00000004 4155                    	push r13   ; push everything
    12 00000006 4156                    	push r14   ; push everything
    13 00000008 4157                    	push r15   ; push everything
    14                                  
    15 0000000A E814000000              	call f1058 ; call main
    16                                  
    17 0000000F 5B                      	pop rbx   ; restore initial regs state
    18 00000010 5D                      	pop rbp   ; restore initial regs state
    19 00000011 415C                    	pop r12   ; restore initial regs state
    20 00000013 415D                    	pop r13   ; restore initial regs state
    21 00000015 415E                    	pop r14   ; restore initial regs state
    22 00000017 415F                    	pop r15   ; restore initial regs state
    23                                  
    24 00000019 4889C7                  	mov rdi, rax
    25 0000001C B83C000000              	mov rax, 0x3C
    26 00000021 0F05                    	syscall
    27                                  
    28                                  f1058: ; def main
    29 00000023 55                      	push rbp ; create stack frame
    30 00000024 4889E5                  	mov rbp, rsp
    31                                  
    32 00000027 4883EC00                	sub rsp, 0 ; jump over parameters
    33                                  
    34 0000002B B800000000              	mov rax, 0 ; const value << 9
    35 00000030 4883EC08                	sub rsp, 8 ; declared ЛошедьБ; [8; 16]
    36 00000034 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    37                                  	
    38 00000038 B800000000              	mov rax, 0 ; const value << 9
    39 0000003D 4883EC08                	sub rsp, 8 ; declared ЛошедьФ; [16; 24]
    40 00000041 488945F0                	mov [rbp - 16], rax ; ЛошедьФ = rax
    41                                  	
    42 00000045 4831FF                  	xor rdi, rdi
    43 00000048 48BE-                   	mov rsi, inputbuf ; buffer for inputted value
    43 0000004A [0000000000000000] 
    44                                  
    45 00000052 BA0F000000              	mov rdx, 15
    46 00000057 4831C0                  	xor rax, rax
    47 0000005A 0F05                    	syscall
    48 0000005C 4889C1                  	mov rcx, rax
    49 0000005F E8FC000000              	call atoi
    50 00000064 48C1E009                	sal rax, 9 ; pseudo-float emul
    51 00000068 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    52                                  	
    53 0000006C 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    54 00000070 E809000000              	call out
    55                                  	
    56 00000075 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    57 00000079 4889EC                  	mov rsp, rbp
    58 0000007C 5D                      	pop rbp ; stack frame return
    59                                  
    60 0000007D C3                      	ret
    61                                  	
    62                                  
    63                                  section .data
    64                                  
    65 00000004 0A3E3E20                outArr: db 10, ">> "
    66 00000008 000000000000000000-     outBig: dq 0, 0
    66 00000011 00000000000000     
    67 00000018 2E                      outDot: db '.'
    68 00000019 000000000000000000-     outLow: dq 0, 0 
    68 00000022 00000000000000     
    69                                  
    70                                  section .text
    71                                  
    72                                  ;==============================================
    73                                  ; StdLib: out
    74                                  ; Expects:
    75                                  ;   outbuffer
    76                                  ;   rax - value
    77                                  ; Returns: None
    78                                  ;==============================================
    79                                  
    80                                  out:
    81 0000007E 48BF-                       mov rdi, outBig
    81 00000080 [0800000000000000] 
    82 00000088 4883F800                    cmp rax, 0
    83 0000008C 7D0E                        jge .NotNegative
    84 0000008E C60425[08000000]2D          mov BYTE [outBig], '-'
    85 00000096 48FFC7                      inc rdi
    86 00000099 48F7D8                      neg rax
    87                                  .NotNegative:
    88 0000009C 50                          push rax
    89 0000009D 48C1E809                    shr rax, 9
    90 000000A1 4889C2                      mov rdx, rax
    91 000000A4 E875000000                  call itoa10
    92 000000A9 B801000000                  mov rax, 0x01
    93 000000AE BF01000000                  mov rdi, 0x01
    94 000000B3 48BE-                       mov rsi, outArr
    94 000000B5 [0400000000000000] 
    95 000000BD 4C89C2                      mov rdx, r8
    96 000000C0 4883C205                    add rdx, 5
    97 000000C4 0F05                        syscall
    98 000000C6 58                          pop rax
    99 000000C7 4825FF010000                and rax, 511
   100 000000CD BBE8030000                  mov rbx, 1000
   101 000000D2 48F7E3                      mul rbx
   102 000000D5 48C1E809                    shr rax, 9
   103 000000D9 4889C2                      mov rdx, rax
   104 000000DC 48BF-                       mov rdi, outLow
   104 000000DE [1900000000000000] 
   105 000000E6 E833000000                  call itoa10
   106 000000EB B801000000                  mov rax, 0x01
   107 000000F0 BF01000000                  mov rdi, 0x01
   108 000000F5 48BE-                       mov rsi, outDot
   108 000000F7 [1800000000000000] 
   109 000000FF 4C89C2                      mov rdx, r8
   110 00000102 4883C201                    add rdx, 1
   111 00000106 0F05                        syscall
   112 00000108 C3                          ret
   113                                  ;==============================================
   114                                  ; StdLib: itoa
   115                                  ;==============================================
   116                                  
   117                                  CountBytes:
   118 00000109 4831C0                  	xor rax, rax
   119 0000010C 4889D0                          mov rax, rdx	; save value in r10 to count symbols in it
   120 0000010F 30ED                            xor ch, ch
   121                                  .Loop:
   122 00000111 FEC5                            inc ch  	; bytes counter
   123 00000113 48D3E8                          shr rax, cl     ; rax >> cl
   124 00000116 75F9                            jnz .Loop
   125 00000118 4831C0                  	xor rax, rax
   126 0000011B 88E8                            mov al, ch
   127 0000011D C3                      ret
   128                                  ;==============================================
   129                                  ; Converts integer value into a string, base 10
   130                                  ; Expects:
   131                                  ;       rdx - Integer value
   132                                  ;       rdi - Buffer to write into
   133                                  ; Returns:
   134                                  ;       r8  - Printed bytes num
   135                                  ; Destr:
   136                                  ;       rdx, r10, r9
   137                                  ;==============================================
   138                                  itoa10:
   139 0000011E 4D31C0                  xor r8, r8		; r8 = bytes counter
   140 00000121 4989D1                  mov r9, rdx 		; from now on, value is stored in r9
   141 00000124 4889D0                  mov rax, rdx		; save value to rax
   142 00000127 41BA0A000000            mov r10, 10
   143                                  .CntBytes:              	; skips, bytes that are required to save the value
   144 0000012D 4831D2                  xor rdx, rdx		; reset remaining
   145 00000130 49F7F2                  div r10            ; rax = rax / 10; rdx = rax % 10
   146 00000133 48FFC7                  inc rdi
   147 00000136 49FFC0                  inc r8
   148 00000139 4883F800                cmp rax, 0000h
   149 0000013D 77EE                    ja .CntBytes
   150 0000013F 4C89C8                  mov rax, r9           	; reset value
   151 00000142 C60700                  mov byte [rdi], 00
   152 00000145 48FFCF                  dec rdi
   153                                  .Print:
   154 00000148 4831D2                  xor rdx, rdx
   155 0000014B 49F7F2                  div r10                ; rax = rax / 10; rdx = rax % 10
   156 0000014E 80C230                  add dl, '0'           	; to ASCII
   157 00000151 8817                    mov [rdi], dl
   158 00000153 48FFCF                  dec rdi
   159 00000156 4883F800                cmp rax, 00h
   160 0000015A 77EC                    ja .Print
   161                                  ; rdi = &buffer - 1
   162 0000015C 48FFC7                  inc rdi ; rdi = &buffer
   163 0000015F C3                      ret
   164                                  
   165                                  
   166                                  section .bss
   167                                  
   168 00000000 <res 00000010>          inputbuf: resq 2
   169                                  
   170                                  section .text
   171                                  
   172                                  ;==============================================
   173                                  ; StdLib: atoi
   174                                  ; Expects:
   175                                  ;     rsi - inputbuf
   176                                  ;     rcx - len of input
   177                                  ; Returns:
   178                                  ;     rax - result int
   179                                  ;==============================================
   180                                  atoi:
   181 00000160 4831C0                      xor rax, rax
   182 00000163 4831DB                      xor rbx, rbx
   183 00000166 48FFC9                      dec rcx
   184 00000169 7421                        jz .End
   185 0000016B 803E2D                      cmp BYTE [rsi], '-'
   186 0000016E 7506                        jne .Loop
   187 00000170 48FFC6                      inc rsi
   188 00000173 48FFC9                      dec rcx
   189                                  .Loop:
   190 00000176 8A1E                        mov bl, [rsi]
   191 00000178 4883EB30                    sub rbx, '0'
   192 0000017C 48FFC6                      inc rsi
   193 0000017F BA0A000000                  mov rdx, 10
   194 00000184 48F7E2                      mul rdx
   195 00000187 4801D8                      add rax, rbx
   196 0000018A E2EA                        loop .Loop
   197 0000018C 803C25[00000000]2D      .End:    cmp BYTE [inputbuf], '-'
   198 00000194 7503                        jne .Ret
   199 00000196 48F7D8                      neg rax
   200                                  .Ret:
   201 00000199 C3                          ret
   202                                  
   203                                  
