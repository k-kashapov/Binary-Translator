     1                                  global _start
     2                                  section .data
     3                                  
     4 00000000 00020000                const_for_pow: dd 0x200        ; memory for float computations
     5                                  section .text
     6                                  
     7                                  _start:
     8 00000000 53                      	push rbx   ; push everything
     9 00000001 55                      	push rbp   ; push everything
    10 00000002 4154                    	push r12   ; push everything
    11 00000004 4155                    	push r13   ; push everything
    12 00000006 4156                    	push r14   ; push everything
    13 00000008 4157                    	push r15   ; push everything
    14                                  
    15 0000000A E814000000              	call f1058 ; call main
    16                                  
    17 0000000F 5B                      	pop rbx   ; restore initial regs state
    18 00000010 5D                      	pop rbp   ; restore initial regs state
    19 00000011 415C                    	pop r12   ; restore initial regs state
    20 00000013 415D                    	pop r13   ; restore initial regs state
    21 00000015 415E                    	pop r14   ; restore initial regs state
    22 00000017 415F                    	pop r15   ; restore initial regs state
    23                                  
    24 00000019 4889C7                  	mov rdi, rax
    25 0000001C B83C000000              	mov rax, 0x3C
    26 00000021 0F05                    	syscall
    27                                  
    28                                  f1058: ; def main
    29 00000023 55                      	push rbp ; create stack frame
    30 00000024 4889E5                  	mov rbp, rsp
    31                                  
    32 00000027 4883EC00                	sub rsp, 0 ; jump over parameters
    33                                  
    34 0000002B B800000000              	mov rax, 0 ; const value << 9
    35 00000030 4883EC08                	sub rsp, 8 ; declared ЛошедьБ; [8; 16]
    36 00000034 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    37                                  	
    38 00000038 B800000000              	mov rax, 0 ; const value << 9
    39 0000003D 4883EC08                	sub rsp, 8 ; declared ЛошедьФ; [16; 24]
    40 00000041 488945F0                	mov [rbp - 16], rax ; ЛошедьФ = rax
    41                                  	
    42 00000045 4831FF                  	xor rdi, rdi
    43 00000048 4883EC08                	sub rsp, 8
    44 0000004C 4889E6                  	mov rsi, rsp ; buffer for inputted value
    45                                  
    46 0000004F BA07000000              	mov rdx, 7
    47 00000054 4831C0                  	xor rax, rax
    48 00000057 0F05                    	syscall
    49 00000059 4889E6                  	mov rsi, rsp
    50 0000005C 4889C1                  	mov rcx, rax
    51 0000005F E800010000              	call atoi
    52 00000064 4883C408                	add rsp, 8
    53 00000068 48C1E009                	sal rax, 9 ; pseudo-float emul
    54 0000006C 488945F8                	mov [rbp - 8], rax ; ЛошедьБ = rax
    55                                  	
    56 00000070 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    57 00000074 E809000000              	call out
    58                                  	
    59 00000079 488B45F8                	mov rax, [rbp - 8] ; ЛошедьБ
    60 0000007D 4889EC                  	mov rsp, rbp
    61 00000080 5D                      	pop rbp ; stack frame return
    62                                  
    63 00000081 C3                      	ret
    64                                  	
    65                                  
    66                                  section .data
    67                                  
    68 00000004 0A3E3E20                outArr: db 10, ">> "
    69 00000008 000000000000000000-     outBig: dq 0, 0
    69 00000011 00000000000000     
    70 00000018 2E                      outDot: db '.'
    71 00000019 000000000000000000-     outLow: dq 0, 0 
    71 00000022 00000000000000     
    72                                  
    73                                  section .text
    74                                  
    75                                  ;==============================================
    76                                  ; StdLib: out
    77                                  ; Expects:
    78                                  ;   outbuffer
    79                                  ;   rax - value
    80                                  ; Returns: None
    81                                  ;==============================================
    82                                  
    83                                  out:
    84 00000082 48BF-                       mov rdi, outBig
    84 00000084 [0800000000000000] 
    85 0000008C 4883F800                    cmp rax, 0
    86 00000090 7D0E                        jge .NotNegative
    87 00000092 C60425[08000000]2D          mov BYTE [outBig], '-'
    88 0000009A 48FFC7                      inc rdi
    89 0000009D 48F7D8                      neg rax
    90                                  .NotNegative:
    91 000000A0 50                          push rax
    92 000000A1 48C1E809                    shr rax, 9
    93 000000A5 4889C2                      mov rdx, rax
    94 000000A8 E875000000                  call itoa10
    95 000000AD B801000000                  mov rax, 0x01
    96 000000B2 BF01000000                  mov rdi, 0x01
    97 000000B7 48BE-                       mov rsi, outArr
    97 000000B9 [0400000000000000] 
    98 000000C1 4C89C2                      mov rdx, r8
    99 000000C4 4883C205                    add rdx, 5
   100 000000C8 0F05                        syscall
   101 000000CA 58                          pop rax
   102 000000CB 4825FF010000                and rax, 511
   103 000000D1 BBE8030000                  mov rbx, 1000
   104 000000D6 48F7E3                      mul rbx
   105 000000D9 48C1E809                    shr rax, 9
   106 000000DD 4889C2                      mov rdx, rax
   107 000000E0 48BF-                       mov rdi, outLow
   107 000000E2 [1900000000000000] 
   108 000000EA E833000000                  call itoa10
   109 000000EF B801000000                  mov rax, 0x01
   110 000000F4 BF01000000                  mov rdi, 0x01
   111 000000F9 48BE-                       mov rsi, outDot
   111 000000FB [1800000000000000] 
   112 00000103 4C89C2                      mov rdx, r8
   113 00000106 4883C201                    add rdx, 1
   114 0000010A 0F05                        syscall
   115 0000010C C3                          ret
   116                                  ;==============================================
   117                                  ; StdLib: itoa
   118                                  ;==============================================
   119                                  
   120                                  CountBytes:
   121 0000010D 4831C0                  	xor rax, rax
   122 00000110 4889D0                          mov rax, rdx	; save value in r10 to count symbols in it
   123 00000113 30ED                            xor ch, ch
   124                                  .Loop:
   125 00000115 FEC5                            inc ch  	; bytes counter
   126 00000117 48D3E8                          shr rax, cl     ; rax >> cl
   127 0000011A 75F9                            jnz .Loop
   128 0000011C 4831C0                  	xor rax, rax
   129 0000011F 88E8                            mov al, ch
   130 00000121 C3                      ret
   131                                  ;==============================================
   132                                  ; Converts integer value into a string, base 10
   133                                  ; Expects:
   134                                  ;       rdx - Integer value
   135                                  ;       rdi - Buffer to write into
   136                                  ; Returns:
   137                                  ;       r8  - Printed bytes num
   138                                  ; Destr:
   139                                  ;       rdx, r10, r9
   140                                  ;==============================================
   141                                  itoa10:
   142 00000122 4D31C0                  xor r8, r8		; r8 = bytes counter
   143 00000125 4989D1                  mov r9, rdx 		; from now on, value is stored in r9
   144 00000128 4889D0                  mov rax, rdx		; save value to rax
   145 0000012B 41BA0A000000            mov r10, 10
   146                                  .CntBytes:              	; skips, bytes that are required to save the value
   147 00000131 4831D2                  xor rdx, rdx		; reset remaining
   148 00000134 49F7F2                  div r10            ; rax = rax / 10; rdx = rax % 10
   149 00000137 48FFC7                  inc rdi
   150 0000013A 49FFC0                  inc r8
   151 0000013D 4883F800                cmp rax, 0000h
   152 00000141 77EE                    ja .CntBytes
   153 00000143 4C89C8                  mov rax, r9           	; reset value
   154 00000146 C60700                  mov byte [rdi], 00
   155 00000149 48FFCF                  dec rdi
   156                                  .Print:
   157 0000014C 4831D2                  xor rdx, rdx
   158 0000014F 49F7F2                  div r10                ; rax = rax / 10; rdx = rax % 10
   159 00000152 80C230                  add dl, '0'           	; to ASCII
   160 00000155 8817                    mov [rdi], dl
   161 00000157 48FFCF                  dec rdi
   162 0000015A 4883F800                cmp rax, 00h
   163 0000015E 77EC                    ja .Print
   164                                  ; rdi = &buffer - 1
   165 00000160 48FFC7                  inc rdi ; rdi = &buffer
   166 00000163 C3                      ret
   167                                  
   168                                  
   169                                  section .bss
   170                                  
   171 00000000 <res 00000010>          inputbuf: resq 2
   172                                  
   173                                  section .text
   174                                  
   175                                  ;==============================================
   176                                  ; StdLib: atoi
   177                                  ; Expects:
   178                                  ;     rsi = rsp - input buffer
   179                                  ;     rcx - len of input
   180                                  ; Returns:
   181                                  ;     rax - result int
   182                                  ;==============================================
   183                                  atoi:
   184 00000164 4831C0                      xor rax, rax
   185 00000167 4831DB                      xor rbx, rbx
   186 0000016A 48FFC9                      dec rcx
   187 0000016D 7421                        jz .End
   188 0000016F 803E2D                      cmp BYTE [rsi], '-'
   189 00000172 7506                        jne .Loop
   190 00000174 48FFC6                      inc rsi
   191 00000177 48FFC9                      dec rcx
   192                                  .Loop:
   193 0000017A 8A1E                        mov bl, [rsi]
   194 0000017C 4883EB30                    sub rbx, '0'
   195 00000180 48FFC6                      inc rsi
   196 00000183 BA0A000000                  mov rdx, 10
   197 00000188 48F7E2                      mul rdx
   198 0000018B 4801D8                      add rax, rbx
   199 0000018E E2EA                        loop .Loop
   200 00000190 807C24082D              .End:    cmp BYTE [rsp + 8], '-'
   201 00000195 7503                        jne .Ret
   202 00000197 48F7D8                      neg rax
   203                                  .Ret:
   204 0000019A C3                          ret
   205                                  
   206                                  
