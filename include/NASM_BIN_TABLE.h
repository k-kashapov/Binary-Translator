// We will define BIN (command, binary representation, byte length, arg_len)

BIN (48 83 ec 08        	, "sub    rsp,0x8")
BIN (48 83 ec 10        	, "sub    rsp,0x10")
BIN (48 81 ec 02 01 00 00   , "sub    rsp,0x102")
BIN (48 81 ec 00 02 00 00   , "sub    rsp,0x200")
BIN (48 81 ec 9a 02 00 00   , "sub    rsp,0x29a")
BIN (48 89 44 24 f8     	, "mov    QWORD PTR [rsp-0x8],rax")
BIN (48 89 44 24 f0     	, "mov    QWORD PTR [rsp-0x10],rax")
BIN (48 89 84 24 fe fe ff ff, "mov    QWORD PTR [rsp-0x102],rax")
BIN (48 89 84 24 00 fe ff ff, "mov    QWORD PTR [rsp-0x200],rax")
BIN (48 89 84 24 66 fd ff ff, "mov    QWORD PTR [rsp-0x29a],rax")
BIN (e8 bc ff ff ff     	, "call   0 <_start>")
BIN (48 89 ec           	, "mov    rsp,rbp")
BIN (5d                 	, "pop    rbp")
BIN (c3                 	, "ret    ")
BIN (55                 	, "push   rbp")
BIN (48 89 e5           	, "mov    rbp,rsp")
BIN (48 31 ff           	, "xor    rdi,rdi")
BIN (be 00 00 00 00     	, "mov    esi,0x0")
BIN (48 8d 34 25 00 00 00 00, "lea    rsi,ds:0x0")
BIN (ba 0f 00 00 00     	, "mov    edx,0xf")
BIN (48 31 c0           	, "xor    rax,rax")
BIN (0f 05              	, "syscall ")
BIN (48 89 c1           	, "mov    rcx,rax")
BIN (48 c1 e0 09        	, "shl    rax,0x9")
BIN (48 c1 f8 09        	, "sar    rax,0x9")
BIN (49 89 e4           	, "mov    r12,rsp")
BIN (48 85 c0           	, "test   rax,rax")
BIN (74 0d              	, "je     87 <label.whileEnd>")
BIN (4c 89 e4           	, "mov    rsp,r12")
BIN (eb f9              	, "jmp    78 <label.while>")
BIN (50                 	, "push   rax")
BIN (5b                 	, "pop    rbx")
BIN (48 01 d8           	, "add    rax,rbx")
BIN (48 29 d8           	, "sub    rax,rbx")
