00000000:		const_for_pow: dq 512
00000008:		PUSH_EVERYTING
00000012:		call main
00000017:		POP_EVERYTING
00000021:		EXIT_0
0000002b:		IN_CODE
0000008a:		OUT_CODE
0000015a:		POW_CODE
000001b2:		f1025: ; def Fact
000001b2:		push rbp ; create stack frame
000001b3:		mov rbp, rsp

000001b6:		sub rsp, 8 ; jump over parameters

000001bd:		mov rax, 0 ; const value << 9
000001c2:		sub rsp, 8 ; declared Результат; [16; 24]
000001c9:		mov [rbp - 16], rax ; Результат = rax
000001d0:		
000001d0:		; if statement
000001d0:		; JG
000001d0:		mov rax, [rbp - 8] ; Итератор
000001d7:		mov rbx, rax ; save left to rbx
000001da:		mov rax, 512 ; const value << 9
000001df:		cmp rbx, rax
000001e2:		JG .0cmp

000001e8:		xor rax, rax ; false
000001eb:		jmp .0cmpEnd

000001f0:		.0cmp:
000001f0:		mov rax, 1 ; true

000001f5:		.0cmpEnd:

000001f5:		test rax, rax
000001f8:		je .0false

000001fe:		; call args
000001fe:		mov rax, 512 ; const value << 9
00000203:		push rax

00000204:		mov rax, [rbp - 8] ; Итератор
0000020b:		pop rbx

0000020c:		SUB rax, rbx

0000020f:		mov [rsp - 24], rax
00000217:		call f1025 ; call Fact
0000021c:		mov [rbp - 16], rax ; Результат = rax
00000223:		
00000223:		jmp .0enif

00000228:		.0false:

00000228:		mov rax, 512 ; const value << 9
0000022d:		mov [rbp - 16], rax ; Результат = rax
00000234:		
00000234:		.0enif:

00000234:		
00000234:		mov rax, [rbp - 8] ; Итератор
0000023b:		push rax

0000023c:		mov rax, [rbp - 16] ; Результат
00000243:		pop rbx

00000244:		imul rbx

00000247:		sar rax, 9 ; pseudo-float emul
0000024b:		mov rsp, rbp
0000024e:		pop rbp ; stack frame return

0000024f:		ret
00000250:		
00000250:		
00000250:		f1058: ; def main
00000250:		push rbp ; create stack frame
00000251:		mov rbp, rsp

00000254:		sub rsp, 0 ; jump over parameters

0000025b:		mov rax, 0 ; const value << 9
00000260:		sub rsp, 8 ; declared Резалт; [8; 16]
00000267:		mov [rbp - 8], rax ; Резалт = rax
0000026e:		
0000026e:		mov rax, 0 ; const value << 9
00000273:		sub rsp, 8 ; declared База; [16; 24]
0000027a:		mov [rbp - 16], rax ; База = rax
00000281:		
00000281:		mov rax, 0 ; const value << 9
00000286:		sub rsp, 8 ; declared Повторы; [24; 32]
0000028d:		mov [rbp - 24], rax ; Повторы = rax
00000294:		
00000294:		mov rax, 6144 ; const value << 9
00000299:		mov [rbp - 16], rax ; База = rax
000002a0:		
000002a0:		mov rax, 51200000 ; const value << 9
000002a5:		mov [rbp - 24], rax ; Повторы = rax
000002ac:		
000002ac:		mov r12, rsp ; save rsp to rcx
000002af:		; while
000002af:		.0while:
000002af:		; JG
000002af:		mov rax, [rbp - 24] ; Повторы
000002b6:		mov rbx, rax ; save left to rbx
000002b9:		mov rax, 0 ; const value << 9
000002be:		cmp rbx, rax
000002c1:		JG .1cmp

000002c7:		xor rax, rax ; false
000002ca:		jmp .1cmpEnd

000002cf:		.1cmp:
000002cf:		mov rax, 1 ; true

000002d4:		.1cmpEnd:

000002d4:		test rax, rax
000002d7:		je .0whileEnd
000002dd:		mov rax, 512 ; const value << 9
000002e2:		push rax

000002e3:		mov rax, [rbp - 24] ; Повторы
000002ea:		pop rbx

000002eb:		SUB rax, rbx

000002ee:		mov [rbp - 24], rax ; Повторы = rax
000002f5:		
000002f5:		; call args
000002f5:		mov rax, [rbp - 16] ; База
000002fc:		mov [rsp - 24], rax
00000304:		call f1025 ; call Fact
00000309:		mov [rbp - 8], rax ; Резалт = rax
00000310:		
00000310:		mov rsp, r12 ; forget any variables created during the loop
00000313:		jmp .0while
00000318:		.0whileEnd:
00000318:		
00000318:		mov rax, [rbp - 8] ; Резалт
0000031f:		call out
00000324:		
00000324:		mov rax, [rbp - 8] ; Резалт
0000032b:		mov rsp, rbp
0000032e:		pop rbp ; stack frame return

0000032f:		ret
00000330:		
00000330:		
