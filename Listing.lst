00000000:		const_for_pow: dq 512
00000008:		PUSH_EVERYTING
00000012:		call main
00000017:		POP_EVERYTING
00000021:		ret
00000022:		IN_CODE
00000081:		OUT_CODE
00000154:		POW_CODE
000001ac:		f8991: ; def Линейная
000001ac:		push rbp ; create stack frame
000001ad:		mov rbp, rsp

000001b0:		sub rsp, 16 ; jump over parameters

000001b7:		; if statement
000001b7:		; JE
000001b7:		mov rax, [rbp - 16] ; ЛошедьБ
000001be:		mov rbx, rax ; save left to rbx
000001c1:		mov rax, 0 ; const value << 9
000001c6:		cmp rbx, rax
000001c9:		JE .0cmp

000001cf:		xor rax, rax ; false
000001d2:		jmp .0cmpEnd

000001d7:		.0cmp:
000001d7:		mov rax, 1 ; true

000001dc:		.0cmpEnd:

000001dc:		test rax, rax
000001df:		je .0false

000001e5:		; if statement
000001e5:		; JE
000001e5:		mov rax, [rbp - 8] ; ЛошедьК
000001ec:		mov rbx, rax ; save left to rbx
000001ef:		mov rax, 0 ; const value << 9
000001f4:		cmp rbx, rax
000001f7:		JE .1cmp

000001fd:		xor rax, rax ; false
00000200:		jmp .1cmpEnd

00000205:		.1cmp:
00000205:		mov rax, 1 ; true

0000020a:		.1cmpEnd:

0000020a:		test rax, rax
0000020d:		je .1false

00000213:		mov rax, 0 ; const value << 9
00000218:		sub rsp, 8 ; declared Количество; [24; 32]
0000021f:		mov [rbp - 24], rax ; Количество = rax
00000226:		
00000226:		mov rax, 51200 ; const value << 9
0000022b:		mov [rbp - 24], rax ; Количество = rax
00000232:		
00000232:		mov rax, [rbp - 24] ; Количество
00000239:		call out
0000023e:		
0000023e:		jmp .1enif

00000243:		.1false:

00000243:		mov rax, 0 ; const value << 9
00000248:		mov [rbp - 32], rax ; Количество = rax
0000024f:		
0000024f:		mov rax, 512 ; const value << 9
00000254:		mov [rbp - 24], rax ; Количество = rax
0000025b:		
0000025b:		mov rax, [rbp - 24] ; Количество
00000262:		call out
00000267:		
00000267:		mov rax, 0 ; const value << 9
0000026c:		sub rsp, 8 ; declared Нулёвочка; [32; 40]
00000273:		mov [rbp - 32], rax ; Нулёвочка = rax
0000027a:		
0000027a:		mov rax, 0 ; const value << 9
0000027f:		mov [rbp - 32], rax ; Нулёвочка = rax
00000286:		
00000286:		mov rax, [rbp - 32] ; Нулёвочка
0000028d:		call out
00000292:		
00000292:		.1enif:

00000292:		
00000292:		jmp .0enif

00000297:		.0false:

00000297:		; if statement
00000297:		; JE
00000297:		mov rax, [rbp - 8] ; ЛошедьК
0000029e:		mov rbx, rax ; save left to rbx
000002a1:		mov rax, 0 ; const value << 9
000002a6:		cmp rbx, rax
000002a9:		JE .2cmp

000002af:		xor rax, rax ; false
000002b2:		jmp .2cmpEnd

000002b7:		.2cmp:
000002b7:		mov rax, 1 ; true

000002bc:		.2cmpEnd:

000002bc:		test rax, rax
000002bf:		je .2false

000002c5:		mov rax, 0 ; const value << 9
000002ca:		sub rsp, 8 ; declared Жопа; [40; 48]
000002d1:		mov [rbp - 40], rax ; Жопа = rax
000002d8:		
000002d8:		mov rax, 512 ; const value << 9
000002dd:		push rax

000002de:		mov rax, 0 ; const value << 9
000002e3:		pop rbx

000002e4:		SUB rax, rbx

000002e7:		mov [rbp - 40], rax ; Жопа = rax
000002ee:		
000002ee:		mov rax, [rbp - 40] ; Жопа
000002f5:		call out
000002fa:		
000002fa:		jmp .2enif

000002ff:		.2false:

000002ff:		mov rax, 0 ; const value << 9
00000304:		mov [rbp - 32], rax ; Количество = rax
0000030b:		
0000030b:		mov rax, 512 ; const value << 9
00000310:		mov [rbp - 24], rax ; Количество = rax
00000317:		
00000317:		mov rax, [rbp - 24] ; Количество
0000031e:		call out
00000323:		
00000323:		mov rax, 0 ; const value << 9
00000328:		sub rsp, 8 ; declared Результат; [48; 56]
0000032f:		mov [rbp - 48], rax ; Результат = rax
00000336:		
00000336:		mov rax, [rbp - 8] ; ЛошедьК
0000033d:		push rax

0000033e:		mov rax, [rbp - 16] ; ЛошедьБ
00000345:		pop rbx

00000346:		sar rbx, 9 ; pseudo-float emul
0000034a:		cqo

0000034c:		idiv rbx

0000034f:		push rax

00000350:		mov rax, 0 ; const value << 9
00000355:		pop rbx

00000356:		SUB rax, rbx

00000359:		mov [rbp - 48], rax ; Результат = rax
00000360:		
00000360:		mov rax, [rbp - 48] ; Результат
00000367:		call out
0000036c:		
0000036c:		.2enif:

0000036c:		
0000036c:		.0enif:

0000036c:		
0000036c:		mov rax, 0 ; const value << 9
00000371:		mov rsp, rbp
00000374:		pop rbp ; stack frame return

00000375:		ret
00000376:		
00000376:		
00000376:		f7938: ; def Квадрат
00000376:		push rbp ; create stack frame
00000377:		mov rbp, rsp

0000037a:		sub rsp, 24 ; jump over parameters

00000381:		; if statement
00000381:		; JE
00000381:		mov rax, [rbp - 8] ; ЛошедьА
00000388:		mov rbx, rax ; save left to rbx
0000038b:		mov rax, 0 ; const value << 9
00000390:		cmp rbx, rax
00000393:		JE .3cmp

00000399:		xor rax, rax ; false
0000039c:		jmp .3cmpEnd

000003a1:		.3cmp:
000003a1:		mov rax, 1 ; true

000003a6:		.3cmpEnd:

000003a6:		test rax, rax
000003a9:		je .3false

000003af:		; call args
000003af:		mov rax, [rbp - 16] ; ЛошедьБ
000003b6:		mov [rsp - 24], rax
000003be:		mov rax, [rbp - 24] ; ЛошедьВ
000003c5:		mov [rsp - 32], rax
000003ce:		call f8991 ; call Линейная
000003d3:		mov [rbp - 8], rax ; ЛошедьА = rax
000003da:		
000003da:		jmp .3enif

000003df:		.3false:

000003df:		mov rax, 0 ; const value << 9
000003e4:		sub rsp, 8 ; declared Дискриминант; [32; 40]
000003eb:		mov [rbp - 32], rax ; Дискриминант = rax
000003f2:		
000003f2:		mov rax, [rbp - 24] ; ЛошедьВ
000003f9:		push rax

000003fa:		mov rax, [rbp - 8] ; ЛошедьА
00000401:		pop rbx

00000402:		imul rbx

00000405:		sar rax, 9 ; pseudo-float emul
00000409:		push rax

0000040a:		mov rax, 2048 ; const value << 9
0000040f:		pop rbx

00000410:		imul rbx

00000413:		sar rax, 9 ; pseudo-float emul
00000417:		push rax

00000418:		mov rax, [rbp - 16] ; ЛошедьБ
0000041f:		push rax

00000420:		mov rax, [rbp - 16] ; ЛошедьБ
00000427:		pop rbx

00000428:		imul rbx

0000042b:		sar rax, 9 ; pseudo-float emul
0000042f:		pop rbx

00000430:		SUB rax, rbx

00000433:		mov [rbp - 32], rax ; Дискриминант = rax
0000043a:		
0000043a:		mov rax, [rbp - 32] ; Дискриминант
00000441:		call out
00000446:		
00000446:		; if statement
00000446:		; JGE
00000446:		mov rax, [rbp - 32] ; Дискриминант
0000044d:		mov rbx, rax ; save left to rbx
00000450:		mov rax, 0 ; const value << 9
00000455:		cmp rbx, rax
00000458:		JGE .4cmp

0000045e:		xor rax, rax ; false
00000461:		jmp .4cmpEnd

00000466:		.4cmp:
00000466:		mov rax, 1 ; true

0000046b:		.4cmpEnd:

0000046b:		test rax, rax
0000046e:		je .4false

00000474:		mov rax, 0 ; const value << 9
00000479:		sub rsp, 8 ; declared Количество; [40; 48]
00000480:		mov [rbp - 40], rax ; Количество = rax
00000487:		
00000487:		mov rax, 1024 ; const value << 9
0000048c:		mov [rbp - 40], rax ; Количество = rax
00000493:		
00000493:		mov rax, [rbp - 40] ; Количество
0000049a:		call out
0000049f:		
0000049f:		mov rax, 0 ; const value << 9
000004a4:		sub rsp, 8 ; declared Корень; [48; 56]
000004ab:		mov [rbp - 48], rax ; Корень = rax
000004b2:		
000004b2:		mov rax, [rbp - 32] ; Дискриминант
000004c1:		mov rax, 1024 ; const value << 9
000004c6:		push rax

000004c7:		mov rax, 512 ; const value << 9
000004cc:		pop rbx

000004cd:		sar rbx, 9 ; pseudo-float emul
000004d1:		cqo

000004d3:		idiv rbx

000004de:		call pow
000004e3:		mov [rbp - 48], rax ; Корень = rax
000004ea:		
000004ea:		mov rax, 0 ; const value << 9
000004ef:		sub rsp, 16 ; declared Корни; [56; 72]
000004f6:		mov [rbp - 64], rax ; Корни = rax
000004fd:		
000004fd:		mov rax, 1024 ; const value << 9
00000502:		push rax

00000503:		mov rax, [rbp - 8] ; ЛошедьА
0000050a:		pop rbx

0000050b:		imul rbx

0000050e:		sar rax, 9 ; pseudo-float emul
00000512:		push rax

00000513:		mov rax, [rbp - 16] ; ЛошедьБ
0000051a:		push rax

0000051b:		mov rax, [rbp - 48] ; Корень
00000522:		pop rbx

00000523:		SUB rax, rbx

00000526:		pop rbx

00000527:		sar rbx, 9 ; pseudo-float emul
0000052b:		cqo

0000052d:		idiv rbx

00000530:		mov [rbp - 56], rax ; Корни = rax
00000537:		
00000537: