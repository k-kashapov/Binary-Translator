00000000:		const_for_pow: dq 512
00000008:		PUSH_EVERYTING
00000012:		call main
00000017:		POP_EVERYTING
00000021:		EXIT_0
0000002b:		IN_CODE
0000008a:		OUT_CODE
0000015a:		POW_CODE
000001b2:		f1058: ; def main
000001b2:		push rbp ; create stack frame
000001b3:		mov rbp, rsp

000001b6:		sub rsp, 0 ; jump over parameters

000001bd:		mov rax, 0 ; const value << 9
000001c2:		sub rsp, 8 ; declared ЛошедьА; [8; 16]
000001c9:		mov [rbp - 8], rax ; ЛошедьА = rax
000001d0:		
000001d0:		mov rax, 0 ; const value << 9
000001d5:		sub rsp, 8 ; declared ЛошедьБ; [16; 24]
000001dc:		mov [rbp - 16], rax ; ЛошедьБ = rax
000001e3:		
000001e3:		mov rax, 0 ; const value << 9
000001e8:		sub rsp, 8 ; declared ЛошедьВ; [24; 32]
000001ef:		mov [rbp - 24], rax ; ЛошедьВ = rax
000001f6:		
000001f6:		call in
000001fb:		mov [rbp - 8], rax ; ЛошедьА = rax
00000202:		
00000202:		call in
00000207:		mov [rbp - 16], rax ; ЛошедьБ = rax
0000020e:		
0000020e:		mov rax, [rbp - 8] ; ЛошедьА
0000021d:		mov rax, [rbp - 16] ; ЛошедьБ
0000022c:		call pow
00000231:		mov [rbp - 24], rax ; ЛошедьВ = rax
00000238:		
00000238:		mov rax, [rbp - 24] ; ЛошедьВ
0000023f:		call out
00000244:		
00000244:		mov rax, 0 ; const value << 9
00000249:		mov rsp, rbp
0000024c:		pop rbp ; stack frame return

0000024d:		ret
0000024e:		
0000024e:		
