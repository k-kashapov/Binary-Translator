00000000:		const_for_pow: dq 512
00000008:		PUSH_EVERYTING
00000012:		call main
00000017:		POP_EVERYTING
00000021:		ret
00000022:		f7639: ; def Функция
00000022:		push rbp ; create stack frame
00000023:		mov rbp, rsp

00000026:		sub rsp, 16 ; jump over parameters

0000002d:		mov rax, 0 ; const value << 9
00000032:		sub rsp, 8 ; declared Разность; [24; 32]
00000039:		mov [rbp - 24], rax ; Разность = rax
00000040:		
00000040:		mov rax, [rbp - 16] ; Правый
00000047:		push rax

00000048:		mov rax, [rbp - 8] ; Левый
0000004f:		pop rbx

00000050:		SUB rax, rbx

00000053:		mov [rbp - 24], rax ; Разность = rax
0000005a:		
0000005a:		mov rax, [rbp - 24] ; Разность
00000061:		mov rsp, rbp
00000064:		pop rbp ; stack frame return

00000065:		ret
00000066:		
00000066:		
00000066:		f1058: ; def main
00000066:		push rbp ; create stack frame
00000067:		mov rbp, rsp

0000006a:		sub rsp, 0 ; jump over parameters

00000071:		mov rax, 0 ; const value << 9
00000076:		sub rsp, 8 ; declared ЛошедьА; [8; 16]
0000007d:		mov [rbp - 8], rax ; ЛошедьА = rax
00000084:		
00000084:		mov rax, 3072 ; const value << 9
00000089:		sub rsp, 8 ; declared Шесть; [16; 24]
00000090:		mov [rbp - 16], rax ; Шесть = rax
00000097:		
00000097:		mov rax, 1024 ; const value << 9
0000009c:		sub rsp, 8 ; declared Два; [24; 32]
000000a3:		mov [rbp - 24], rax ; Два = rax
000000aa:		
000000aa:		; call args
000000aa:		mov rax, [rbp - 16] ; Шесть
000000b1:		mov [rsp - 24], rax
000000b9:		mov rax, [rbp - 24] ; Два
000000c0:		mov [rsp - 32], rax
000000c8:		call f7639 ; call Функция
000000cd:		mov [rbp - 8], rax ; ЛошедьА = rax
000000d4:		
000000d4:		mov rax, 0 ; const value << 9
000000d9:		mov rsp, rbp
000000dc:		pop rbp ; stack frame return

000000dd:		ret
000000de:		
000000de:		
